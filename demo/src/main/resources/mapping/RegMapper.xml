<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.RegMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.model.Reg">
    <id column="reg_id" jdbcType="BIGINT" property="regId" />
    <result column="doctor_id" jdbcType="BIGINT" property="doctorId" />
    <result column="patient_id" jdbcType="BIGINT" property="patientId" />
    <result column="reg_time" jdbcType="TIMESTAMP" property="regTime" />
    <result column="res_date" jdbcType="DATE" property="resDate" />
    <result column="period" jdbcType="BIT" property="period" />
    <result column="amount" jdbcType="REAL" property="amount" />
    <result column="serial_num" jdbcType="INTEGER" property="serialNum" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Base_Column_List">
    reg_id, doctor_id, patient_id, reg_time, res_date, period, amount, serial_num, state
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from reg
    where reg_id = #{regId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from reg
    where reg_id = #{regId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.Reg">
    insert into reg (reg_id, doctor_id, patient_id,
      reg_time, res_date, period,
      amount, serial_num, state
      )
    values (#{regId,jdbcType=BIGINT}, #{doctorId,jdbcType=BIGINT}, #{patientId,jdbcType=BIGINT},
      #{regTime,jdbcType=TIMESTAMP}, #{resDate,jdbcType=DATE}, #{period,jdbcType=BIT},
      #{amount,jdbcType=REAL}, #{serialNum,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.Reg">
    insert into reg
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="regId != null">
        reg_id,
      </if>
      <if test="doctorId != null">
        doctor_id,
      </if>
      <if test="patientId != null">
        patient_id,
      </if>
      <if test="regTime != null">
        reg_time,
      </if>
      <if test="resDate != null">
        res_date,
      </if>
      <if test="period != null">
        period,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="serialNum != null">
        serial_num,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="regId != null">
        #{regId,jdbcType=BIGINT},
      </if>
      <if test="doctorId != null">
        #{doctorId,jdbcType=BIGINT},
      </if>
      <if test="patientId != null">
        #{patientId,jdbcType=BIGINT},
      </if>
      <if test="regTime != null">
        #{regTime,jdbcType=TIMESTAMP},
      </if>
      <if test="resDate != null">
        #{resDate,jdbcType=DATE},
      </if>
      <if test="period != null">
        #{period,jdbcType=BIT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=REAL},
      </if>
      <if test="serialNum != null">
        #{serialNum,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.Reg">
    update reg
    <set>
      <if test="doctorId != null">
        doctor_id = #{doctorId,jdbcType=BIGINT},
      </if>
      <if test="patientId != null">
        patient_id = #{patientId,jdbcType=BIGINT},
      </if>
      <if test="regTime != null">
        reg_time = #{regTime,jdbcType=TIMESTAMP},
      </if>
      <if test="resDate != null">
        res_date = #{resDate,jdbcType=DATE},
      </if>
      <if test="period != null">
        period = #{period,jdbcType=BIT},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=REAL},
      </if>
      <if test="serialNum != null">
        serial_num = #{serialNum,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where reg_id = #{regId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.Reg">
    update reg
    set doctor_id = #{doctorId,jdbcType=BIGINT},
      patient_id = #{patientId,jdbcType=BIGINT},
      reg_time = #{regTime,jdbcType=TIMESTAMP},
      res_date = #{resDate,jdbcType=DATE},
      period = #{period,jdbcType=BIT},
      amount = #{amount,jdbcType=REAL},
      serial_num = #{serialNum,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER}
    where reg_id = #{regId,jdbcType=BIGINT}
  </update>
  <select id="countReserved" resultType="java.lang.Integer">
    select count(*)
    from reg
    where doctor_id = #{doctorId,jdbcType=BIGINT}
    and res_date = #{resDate,jdbcType=DATE}
    and period = #{period,jdbcType=BIT}
  </select>
  <select id="selectByResDatePeriodSerialNum" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from reg
    where res_date = #{resDate}
    and period = #{period}
    and serial_num = #{serialNum}
  </select>
</mapper>