<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.mapper.DoctorMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.model.Doctor" >
    <id column="doctor_id" property="doctorId" jdbcType="BIGINT" />
    <result column="department_id" property="departmentId" jdbcType="BIGINT" />
    <result column="doctor_name" property="doctorName" jdbcType="CHAR" />
    <result column="doctor_user" property="doctorUser" jdbcType="CHAR" />
    <result column="doctor_password" property="doctorPassword" jdbcType="CHAR" />
    <result column="doctor_intro" property="doctorIntro" jdbcType="CHAR" />
    <result column="doctor_email" property="doctorEmail" jdbcType="CHAR" />
    <result column="doctor_mobile" property="doctorMobile" jdbcType="CHAR" />
    <result column="doctor_tel" property="doctorTel" jdbcType="CHAR" />
    <result column="doctor_gender" property="doctorGender" jdbcType="BIT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.example.demo.model.Doctor" extends="BaseResultMap" >
    <result column="doctor_pho" property="doctorPho" jdbcType="LONGVARBINARY" />
  </resultMap>
  <sql id="Base_Column_List" >
    doctor_id, department_id, doctor_name, doctor_user, doctor_password, doctor_intro,
    doctor_email, doctor_mobile, doctor_tel, doctor_gender
  </sql>
  <sql id="Blob_Column_List" >
    doctor_pho
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from doctor
    where doctor_id = #{doctorId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from doctor
    where doctor_id = #{doctorId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.Doctor" >
    insert into doctor (doctor_id, department_id, doctor_name,
      doctor_user, doctor_password, doctor_intro,
      doctor_email, doctor_mobile, doctor_tel,
      doctor_gender, doctor_pho)
    values (#{doctorId,jdbcType=BIGINT}, #{departmentId,jdbcType=BIGINT}, #{doctorName,jdbcType=CHAR},
      #{doctorUser,jdbcType=CHAR}, #{doctorPassword,jdbcType=CHAR}, #{doctorIntro,jdbcType=CHAR},
      #{doctorEmail,jdbcType=CHAR}, #{doctorMobile,jdbcType=CHAR}, #{doctorTel,jdbcType=CHAR},
      #{doctorGender,jdbcType=BIT}, #{doctorPho,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.Doctor" >
    insert into doctor
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="doctorId != null" >
        doctor_id,
      </if>
      <if test="departmentId != null" >
        department_id,
      </if>
      <if test="doctorName != null" >
        doctor_name,
      </if>
      <if test="doctorUser != null" >
        doctor_user,
      </if>
      <if test="doctorPassword != null" >
        doctor_password,
      </if>
      <if test="doctorIntro != null" >
        doctor_intro,
      </if>
      <if test="doctorEmail != null" >
        doctor_email,
      </if>
      <if test="doctorMobile != null" >
        doctor_mobile,
      </if>
      <if test="doctorTel != null" >
        doctor_tel,
      </if>
      <if test="doctorGender != null" >
        doctor_gender,
      </if>
      <if test="doctorPho != null" >
        doctor_pho,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="doctorId != null" >
        #{doctorId,jdbcType=BIGINT},
      </if>
      <if test="departmentId != null" >
        #{departmentId,jdbcType=BIGINT},
      </if>
      <if test="doctorName != null" >
        #{doctorName,jdbcType=CHAR},
      </if>
      <if test="doctorUser != null" >
        #{doctorUser,jdbcType=CHAR},
      </if>
      <if test="doctorPassword != null" >
        #{doctorPassword,jdbcType=CHAR},
      </if>
      <if test="doctorIntro != null" >
        #{doctorIntro,jdbcType=CHAR},
      </if>
      <if test="doctorEmail != null" >
        #{doctorEmail,jdbcType=CHAR},
      </if>
      <if test="doctorMobile != null" >
        #{doctorMobile,jdbcType=CHAR},
      </if>
      <if test="doctorTel != null" >
        #{doctorTel,jdbcType=CHAR},
      </if>
      <if test="doctorGender != null" >
        #{doctorGender,jdbcType=BIT},
      </if>
      <if test="doctorPho != null" >
        #{doctorPho,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.Doctor" >
    update doctor
    <set >
      <if test="departmentId != null" >
        department_id = #{departmentId,jdbcType=BIGINT},
      </if>
      <if test="doctorName != null" >
        doctor_name = #{doctorName,jdbcType=CHAR},
      </if>
      <if test="doctorUser != null" >
        doctor_user = #{doctorUser,jdbcType=CHAR},
      </if>
      <if test="doctorPassword != null" >
        doctor_password = #{doctorPassword,jdbcType=CHAR},
      </if>
      <if test="doctorIntro != null" >
        doctor_intro = #{doctorIntro,jdbcType=CHAR},
      </if>
      <if test="doctorEmail != null" >
        doctor_email = #{doctorEmail,jdbcType=CHAR},
      </if>
      <if test="doctorMobile != null" >
        doctor_mobile = #{doctorMobile,jdbcType=CHAR},
      </if>
      <if test="doctorTel != null" >
        doctor_tel = #{doctorTel,jdbcType=CHAR},
      </if>
      <if test="doctorGender != null" >
        doctor_gender = #{doctorGender,jdbcType=BIT},
      </if>
      <if test="doctorPho != null" >
        doctor_pho = #{doctorPho,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where doctor_id = #{doctorId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.demo.model.Doctor" >
    update doctor
    set department_id = #{departmentId,jdbcType=BIGINT},
      doctor_name = #{doctorName,jdbcType=CHAR},
      doctor_user = #{doctorUser,jdbcType=CHAR},
      doctor_password = #{doctorPassword,jdbcType=CHAR},
      doctor_intro = #{doctorIntro,jdbcType=CHAR},
      doctor_email = #{doctorEmail,jdbcType=CHAR},
      doctor_mobile = #{doctorMobile,jdbcType=CHAR},
      doctor_tel = #{doctorTel,jdbcType=CHAR},
      doctor_gender = #{doctorGender,jdbcType=BIT},
      doctor_pho = #{doctorPho,jdbcType=LONGVARBINARY}
    where doctor_id = #{doctorId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.Doctor" >
    update doctor
    set department_id = #{departmentId,jdbcType=BIGINT},
      doctor_name = #{doctorName,jdbcType=CHAR},
      doctor_user = #{doctorUser,jdbcType=CHAR},
      doctor_password = #{doctorPassword,jdbcType=CHAR},
      doctor_intro = #{doctorIntro,jdbcType=CHAR},
      doctor_email = #{doctorEmail,jdbcType=CHAR},
      doctor_mobile = #{doctorMobile,jdbcType=CHAR},
      doctor_tel = #{doctorTel,jdbcType=CHAR},
      doctor_gender = #{doctorGender,jdbcType=BIT}
    where doctor_id = #{doctorId,jdbcType=BIGINT}
  </update>
  <select id="selectByDepartmentId" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from doctor
    where department_id = #{departmentId,jdbcType=BIGINT}
  </select>
  <select id="selectByUsername" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from doctor
    where doctor_user = #{doctorUser,jdbcType=CHAR}
  </select>
  <select id="count" resultType="java.lang.Integer">
    select count(*)
    from doctor
  </select>
  <select id="countByDepartmentId" resultType="java.lang.Integer">
    select count(*)
    from doctor
    where department_id = #{departmentId}
  </select>
  <select id="selectOnPage" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from doctor
    limit #{start},
    #{addNum}
  </select>
  <select id="selectByDepartmentIdOnPage" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from doctor
    where department_id = #{departmentId}
    limit #{start},
    #{addNum}
  </select>
</mapper>